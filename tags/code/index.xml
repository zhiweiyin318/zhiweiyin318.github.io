<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on Zhiwei Yin</title>
    <link>https://zhiweiyin318.github.io/tags/code/</link>
    <description>Recent content in Code on Zhiwei Yin</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>zhiweiyin@hotmail.com (Zhiwei Yin)</managingEditor>
    <webMaster>zhiweiyin@hotmail.com (Zhiwei Yin)</webMaster>
    <lastBuildDate>Fri, 14 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://zhiweiyin318.github.io/tags/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python jinja2</title>
      <link>https://zhiweiyin318.github.io/post/2018-09-14-python-jinja2/</link>
      <pubDate>Fri, 14 Sep 2018 00:00:00 +0000</pubDate>
      <author>zhiweiyin@hotmail.com (Zhiwei Yin)</author>
      <guid>https://zhiweiyin318.github.io/post/2018-09-14-python-jinja2/</guid>
      <description>jinja2是啥 python的模板引擎，也是Flask的模板引擎，能根据模板字符串替换，有自己的语法规则。 官网: http://docs.jinkan.org/docs/jinja2/ 使用 安装 $ pip install jinja2 语法定义 j</description>
    </item>
    
    <item>
      <title>Python docker-client</title>
      <link>https://zhiweiyin318.github.io/post/2018-09-11-python-docker-client/</link>
      <pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate>
      <author>zhiweiyin@hotmail.com (Zhiwei Yin)</author>
      <guid>https://zhiweiyin318.github.io/post/2018-09-11-python-docker-client/</guid>
      <description>简单记录哈python的docker client的使用。 &amp;gt; 官方文档： &amp;gt; https://docker-py.readthedocs.io/en/stable/client.html &amp;gt; https://docs.docker.com/develop/sdk/examples/ &amp;gt; demo地址： &amp;gt; https://github.com/zhiweiyin318/yzw.python.demo/tree/master/dockerclient 安装 $ pip install docker 使用 client 初始化 需要先创建一个Doc</description>
    </item>
    
    <item>
      <title>OpenStack olso_config</title>
      <link>https://zhiweiyin318.github.io/post/2018-09-10-olso_config/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      <author>zhiweiyin@hotmail.com (Zhiwei Yin)</author>
      <guid>https://zhiweiyin318.github.io/post/2018-09-10-olso_config/</guid>
      <description>oslo oslo作为OpenStack的通用组件，在每一个项目中都有用到，oslo.config主要用于命令行和配置项解析。 参考: * https://gtcsq.readthedocs.io/en/latest/openstack/oslo_cfg.html * https://blog.csdn.net/zhangyifei216/article/details/50434980 * https://blog.csdn.net/hobertony_7/article/details/79206297 * https://www.programcreek.com/python/example/106149/oslo_config.cfg.ConfigOpts</description>
    </item>
    
    <item>
      <title>golang rand生成随机数</title>
      <link>https://zhiweiyin318.github.io/post/2018-09-03-golang-rand/</link>
      <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
      <author>zhiweiyin@hotmail.com (Zhiwei Yin)</author>
      <guid>https://zhiweiyin318.github.io/post/2018-09-03-golang-rand/</guid>
      <description>&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;math/rand package实现了伪随机数字生成器。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;随机数字是通过Source生成的，rand.Seed会初始化默认全局的Source，如果不调用rand.Seed就会使用默认的Source。所生成的随机数字是固定顺序生成的，每次运行程序如果seed相同的话，生成随机数是相同的。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;默认的Source是线程安全的，自己通过New生成的不是。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>golang的测试框架</title>
      <link>https://zhiweiyin318.github.io/post/2018-08-09-golang-test-framework/</link>
      <pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate>
      <author>zhiweiyin@hotmail.com (Zhiwei Yin)</author>
      <guid>https://zhiweiyin318.github.io/post/2018-08-09-golang-test-framework/</guid>
      <description>golang 测试框架 本文主要介绍golang 测试的集中常见的框架。 go test 文件名称位xx_test.go 测试函数Testxxx(t *testing.T) go test -v GoConvey 可以管理和运行</description>
    </item>
    
  </channel>
</rss>